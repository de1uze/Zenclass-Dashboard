{"ast":null,"code":"var _jsxFileName = \"/Users/de1uze/Desktop/capstone_final/Zenclass-Dashboard-frontend/src/containers/CoursePage/index.js\",\n    _s = $RefreshSig$();\n\nimport { Button } from '@mui/material';\nimport React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport ReactPlayer from 'react-player';\nimport { Navigate, useLocation, useParams } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { API } from '../../global';\nimport { SideNavbar } from '../SideNavbar';\nimport \"./coursepage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CoursePage(_ref) {\n  _s();\n\n  let {\n    navRef\n  } = _ref;\n  const navigate = useNavigate();\n  const {\n    courseName\n  } = useParams();\n  const location = useLocation();\n  const [course, setCourse] = useState(location.state && location.state.course);\n  const URL = course.courseURL;\n  const courseData = location.state && location.state.courseData;\n  const [duration, setDuration] = useState(0);\n  const [played, setPlayed] = useState(0);\n  const [playing, setPlaying] = useState(false);\n  const [showFinishButton, setFinishBtnVisibility] = useState(false);\n  const [courseStatus, setCourseStatus] = useState({});\n  const playerRef = useRef(null);\n  const courseRef = useRef(null);\n  let userDetails = localStorage.getItem(\"user\");\n  userDetails = userDetails && JSON.parse(userDetails);\n  const userId = userDetails.userId;\n  const userName = userDetails.userName;\n  const token = userDetails.token;\n  useEffect(() => {\n    getCourseStatus();\n  }, [course]);\n\n  async function getCourseStatus() {\n    const status = await fetch(`${API}/courses/${userId}/getCourseStatus/${course._id}`, {\n      headers: {\n        \"x-auth-token\": token\n      }\n    }).then(data => {\n      // console.log(\"data from api======\", data);\n      return data.json();\n    });\n    console.log(\"in getCourseStatus function \", status);\n    courseRef.isCourseFinished = status.isCourseFinished;\n    setCourseStatus(status);\n  }\n\n  async function updateCourseStatus(data) {\n    try {\n      const result = await fetch(`${API}/courses/updateStatus/${course._id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: {\n          \"content-type\": \"application/json\",\n          \"x-auth-token\": token\n        }\n      });\n    } catch (error) {\n      console.log(\"Error in API for updation of course status - \", error);\n    }\n  } // const handleClickOutside = (event) => {\n  //     event.preventDefault();\n  //     console.log(\"In handleClickOutside  function\",courseStatus);\n  //     var percentage;\n  //     if (courseRef.current && (courseRef.current.contains(event.target))) {\n  //         // inside click\n  //         return;\n  //     }\n  //     if(courseRef.isCourseFinished  !== undefined && !courseRef.isCourseFinished  && playerRef.current) {\n  //         let duration = playerRef.current.getDuration();\n  //         let currentTime = playerRef.current.getCurrentTime();\n  //         percentage = (parseInt(currentTime) / parseInt(duration)) * 100;\n  //         console.log(\"percentage on outside click\", percentage);\n  //         let data = {\n  //             userName: userName,\n  //             courseName : course.course,\n  //             percentageCompleted: percentage,\n  //             isCourseFinished : false\n  //         }\n  //         updateCourseStatus(data);\n  //         getCourseStatus();\n  //     }\n  // };\n\n\n  const handleProgress = state => {\n    console.log('onProgress', state);\n  };\n\n  const handlePlay = () => {\n    console.log('onPlay', playerRef.current.getDuration(), playerRef.current.getCurrentTime());\n    finishButtonVisibility();\n    setPlaying(true);\n  };\n\n  const handlePause = () => {\n    console.log('on Pause', playerRef.current.getDuration(), playerRef.current.getCurrentTime());\n    finishButtonVisibility();\n    setPlaying(false);\n  };\n\n  const finishButtonVisibility = () => {\n    let duration = playerRef.current.getDuration();\n    let currentTime = playerRef.current.getCurrentTime();\n\n    if (currentTime / duration > 0.97) {\n      setFinishBtnVisibility(true);\n    } else {\n      setFinishBtnVisibility(false);\n    }\n  };\n\n  const handleDuration = duration => {\n    console.log('onDuration', duration);\n    setDuration(duration);\n  };\n\n  const handleEnded = () => {\n    setFinishBtnVisibility(true);\n  };\n\n  const onOtherCoursesClick = (e, selectedCourse) => {\n    var percentage;\n\n    if (courseRef.isCourseFinished !== undefined && !courseRef.isCourseFinished && playerRef.current) {\n      let duration = playerRef.current.getDuration();\n      let currentTime = playerRef.current.getCurrentTime();\n      percentage = parseInt(currentTime) / parseInt(duration) * 100;\n      let data = {\n        userName: userName,\n        courseName: course.course,\n        percentageCompleted: percentage,\n        isCourseFinished: false\n      };\n      updateCourseStatus(data); // getCourseStatus();\n    }\n\n    navigate(`/courses/${selectedCourse._id}`, {\n      state: {\n        courseData: courseData,\n        course: selectedCourse\n      }\n    });\n    setCourse(selectedCourse);\n  };\n\n  const onFinishCourse = () => {\n    let data = {\n      userName: userName,\n      courseName: course.course,\n      percentageCompleted: 100,\n      isCourseFinished: true\n    }; // setFinishBtnVisibility(false);\n\n    updateCourseStatus(data);\n    getCourseStatus();\n  };\n\n  const onNavClick = navItem => {\n    let percentage;\n\n    if (courseRef.isCourseFinished !== undefined && !courseRef.isCourseFinished && playerRef.current) {\n      let duration = playerRef.current.getDuration();\n      let currentTime = playerRef.current.getCurrentTime();\n      percentage = parseInt(currentTime) / parseInt(duration) * 100;\n      console.log(\"percentage on outside click\", percentage);\n      let data = {\n        userName: userName,\n        courseName: course.course,\n        percentageCompleted: percentage,\n        isCourseFinished: false\n      };\n      updateCourseStatus(data);\n      getCourseStatus();\n    }\n\n    navigate(`${navItem}`);\n  };\n\n  return localStorage.getItem(\"user\") ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SideNavbar, {\n      onClick: onNavClick,\n      type: \"course\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"courseWrapper\",\n      ref: courseRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leftPlayerWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(ReactPlayer, {\n          className: \"reactPlayer\",\n          ref: playerRef,\n          url: URL,\n          playing: true,\n          controls: true,\n          onPlay: handlePlay,\n          onPause: handlePause,\n          onEnded: handleEnded,\n          onError: e => console.log('onError', e),\n          onProgress: handleProgress,\n          onDuration: handleDuration\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), !courseStatus.isCourseFinished ? /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !showFinishButton,\n          className: !showFinishButton ? \"disabledFinishButton\" : \"finishButton\",\n          onClick: onFinishCourse,\n          variant: \"contained\",\n          children: \"Finsih Course\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"courseCompletion\",\n          children: \"You have successfully completed the course\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rightNavAllCourses\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"All Courses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), courseData.map((course, index) => {\n          return course.courseURL !== URL && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"courseCard\",\n            onClick: e => onOtherCoursesClick(e, course),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: course.coverPage,\n              alt: course.course\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"courseDescription\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: course.course\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: course.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CoursePage, \"EEg8Ooa4uTO3gWEW+fpsh7lMAZ8=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n\n_c = CoursePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoursePage\");","map":{"version":3,"names":["Button","React","useEffect","useRef","useState","ReactPlayer","Navigate","useLocation","useParams","useNavigate","API","SideNavbar","CoursePage","navRef","navigate","courseName","location","course","setCourse","state","URL","courseURL","courseData","duration","setDuration","played","setPlayed","playing","setPlaying","showFinishButton","setFinishBtnVisibility","courseStatus","setCourseStatus","playerRef","courseRef","userDetails","localStorage","getItem","JSON","parse","userId","userName","token","getCourseStatus","status","fetch","_id","headers","then","data","json","console","log","isCourseFinished","updateCourseStatus","result","method","body","stringify","error","handleProgress","handlePlay","current","getDuration","getCurrentTime","finishButtonVisibility","handlePause","currentTime","handleDuration","handleEnded","onOtherCoursesClick","e","selectedCourse","percentage","undefined","parseInt","percentageCompleted","onFinishCourse","onNavClick","navItem","map","index","coverPage","description"],"sources":["/Users/de1uze/Desktop/capstone_final/Zenclass-Dashboard-frontend/src/containers/CoursePage/index.js"],"sourcesContent":["import { Button } from '@mui/material';\nimport React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport ReactPlayer from 'react-player'\nimport { Navigate, useLocation, useParams } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { API } from '../../global';\nimport { SideNavbar } from '../SideNavbar';\n\nimport \"./coursepage.css\";\n\nexport function CoursePage({navRef}){\n    const navigate = useNavigate();\n    const {courseName} = useParams();\n    const location = useLocation();\n    const [course, setCourse] = useState(location.state && location.state.course);\n    const URL = course.courseURL;\n    const courseData = location.state && location.state.courseData;\n    const [duration, setDuration] = useState(0);\n    const [played, setPlayed] = useState(0);\n    const [playing, setPlaying] = useState(false);\n    const [showFinishButton, setFinishBtnVisibility] = useState(false);\n    const [courseStatus, setCourseStatus] = useState({});\n    const playerRef = useRef(null);\n    const courseRef = useRef(null);\n\n\n    let userDetails = localStorage.getItem(\"user\");\n    userDetails = userDetails && JSON.parse(userDetails);\n    const userId = userDetails.userId;\n    const userName = userDetails.userName;\n    const token = userDetails.token;\n\n\n    useEffect(() => {\n        getCourseStatus();\n    }, [course])\n\n    async function getCourseStatus(){\n        const status = await fetch(`${API}/courses/${userId}/getCourseStatus/${course._id}`,{\n            headers: {\"x-auth-token\" : token }\n        }).then((data)=>{\n            // console.log(\"data from api======\", data);\n            return data.json();\n        });\n        console.log(\"in getCourseStatus function \", status);\n        courseRef.isCourseFinished = status.isCourseFinished;\n        setCourseStatus(status);\n    }\n\n    async function updateCourseStatus(data){\n        try{\n            const result = await fetch(`${API}/courses/updateStatus/${course._id}`, {\n                method: \"PUT\",\n                body: JSON.stringify(data),\n                headers: {\"content-type\": \"application/json\", \"x-auth-token\" : token }\n            });\n        }catch(error){\n            console.log(\"Error in API for updation of course status - \",error )\n        }\n    }\n\n    // const handleClickOutside = (event) => {\n    //     event.preventDefault();\n    //     console.log(\"In handleClickOutside  function\",courseStatus);\n    //     var percentage;\n    //     if (courseRef.current && (courseRef.current.contains(event.target))) {\n    //         // inside click\n    //         return;\n    //     }\n    //     if(courseRef.isCourseFinished  !== undefined && !courseRef.isCourseFinished  && playerRef.current) {\n    //         let duration = playerRef.current.getDuration();\n    //         let currentTime = playerRef.current.getCurrentTime();\n    //         percentage = (parseInt(currentTime) / parseInt(duration)) * 100;\n    //         console.log(\"percentage on outside click\", percentage);\n    //         let data = {\n    //             userName: userName,\n    //             courseName : course.course,\n    //             percentageCompleted: percentage,\n    //             isCourseFinished : false\n    //         }\n    //         updateCourseStatus(data);\n    //         getCourseStatus();\n    //     }\n    // };\n\n    const handleProgress = (state) => {\n        console.log('onProgress', state)\n    }\n\n    const handlePlay = () => {\n        console.log('onPlay', playerRef.current.getDuration(), playerRef.current.getCurrentTime());\n        finishButtonVisibility();\n        setPlaying(true);\n    }\n\n    const handlePause = () => {\n        console.log('on Pause', playerRef.current.getDuration(), playerRef.current.getCurrentTime());\n        finishButtonVisibility();\n        setPlaying(false);\n    }\n\n    const finishButtonVisibility = () => {\n        let duration = playerRef.current.getDuration();\n        let currentTime = playerRef.current.getCurrentTime();\n        if(currentTime / duration > 0.97) {\n            setFinishBtnVisibility(true);\n        } else {\n            setFinishBtnVisibility(false);\n        }\n    }\n\n    const handleDuration = (duration) => {\n        console.log('onDuration', duration)\n        setDuration(duration);\n    }\n\n    const handleEnded = () => {\n        setFinishBtnVisibility(true);\n    }\n\n    const onOtherCoursesClick = (e, selectedCourse) => {\n        var percentage;\n        if(courseRef.isCourseFinished  !== undefined && !courseRef.isCourseFinished  && playerRef.current) {\n            let duration = playerRef.current.getDuration();\n            let currentTime = playerRef.current.getCurrentTime();\n            percentage = (parseInt(currentTime) / parseInt(duration)) * 100;\n            let data = {\n                userName: userName,\n                courseName : course.course,\n                percentageCompleted: percentage,\n                isCourseFinished : false\n            }\n            updateCourseStatus(data);\n            // getCourseStatus();\n        }\n        navigate(`/courses/${selectedCourse._id}`, {state:{courseData: courseData, course : selectedCourse}});\n        setCourse(selectedCourse);\n    }\n\n\n    const onFinishCourse = () => {\n        let data = {\n            userName: userName,\n            courseName : course.course,\n            percentageCompleted: 100,\n            isCourseFinished : true\n        }\n        // setFinishBtnVisibility(false);\n        updateCourseStatus(data);\n        getCourseStatus();\n    }\n\n    const onNavClick = (navItem) => {\n        let percentage;\n        if(courseRef.isCourseFinished  !== undefined && !courseRef.isCourseFinished  && playerRef.current) {\n            let duration = playerRef.current.getDuration();\n            let currentTime = playerRef.current.getCurrentTime();\n            percentage = (parseInt(currentTime) / parseInt(duration)) * 100;\n            console.log(\"percentage on outside click\", percentage);\n            let data = {\n                userName: userName,\n                courseName : course.course,\n                percentageCompleted: percentage,\n                isCourseFinished : false\n            }\n            updateCourseStatus(data);\n            getCourseStatus();\n        }\n        navigate(`${navItem}`);\n    }\n\n    return localStorage.getItem(\"user\") ? (\n        <React.Fragment>\n            <SideNavbar onClick={onNavClick} type=\"course\"/>\n            <div className=\"courseWrapper\" ref={courseRef}>\n                <div className='leftPlayerWrapper'>\n                    <ReactPlayer\n                        className=\"reactPlayer\"\n                        ref={playerRef}\n                        url={URL}\n                        playing={true}\n                        controls={true}\n                        onPlay={handlePlay}\n                        onPause={handlePause}\n                        onEnded={handleEnded}\n                        onError={e => console.log('onError', e)}\n                        onProgress={handleProgress}\n                        onDuration={handleDuration}\n                    />\n                    {\n                    !courseStatus.isCourseFinished ? \n                        <Button disabled={!showFinishButton} className={!showFinishButton ? \"disabledFinishButton\" : \"finishButton\"}\n                            onClick = {onFinishCourse} variant=\"contained\">Finsih Course</Button> :\n                        <div className = \"courseCompletion\">You have successfully completed the course</div>\n                    }\n                </div>\n                <div className='rightNavAllCourses'>\n                    <h3>All Courses</h3>\n                    {courseData.map((course, index) => {\n                        return course.courseURL !== URL && (\n                        <div className=\"courseCard\" key={index} onClick={(e) => onOtherCoursesClick(e, course)}>\n                            <img src={course.coverPage} alt={course.course}/>\n                            <div className='courseDescription'>\n                                <h2>{course.course}</h2>\n                                <p>{course.description}</p>\n                            </div>\n                        </div>\n                        );\n                    })}\n                </div>\n            </div>\n        </React.Fragment>\n    ) :\n    (\n        <Navigate to =\"/login\" />\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}